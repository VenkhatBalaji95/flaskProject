---
apiVersion: v1
kind: Service
metadata:
  name: flask-service
  namespace: flask-ns
  labels:
    name: flask-service
  annotations:
    #service.beta.kubernetes.io/aws-load-balancer-type: nlb #It applies to Loadbalancer service type. By default ELB creates classic loadbalancer. Ingress will create ALB
    cloud: aws
spec:
  selector:
    app: python-flask
  ports:
    - port: 80
      targetPort: 5500
      protocol: TCP
      #nodePort: 30000 #Default port range 30000-32767. If not specified, assigned automatically. It applies for Nodeport or Loadbalancer service types.
  type: ClusterIP
  ipFamilies: 
    - "IPv4" #Family type - Specify IPv4 or IPv6.
  ipFamilyPolicy: "SingleStack" #Singlestack means Single IP family. Dualstack means we can allocate both IPv4 or IPv6.
  clusterIP: 10.100.100.100 #None means headless service (used for direct endpoint connections and no proxy reuired), "" to assign automatically
  #externalTrafficPolicy: "Cluster" #Default is Cluster - have good overall load-spreading. Local - potentially imbalanced traffic spreading. It applies to Nodeport and Loadbalacner port Service types
  internalTrafficPolicy: "Cluster" #Default is Cluster - routes internal traffic to a Service to all endpoints. Local routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready.
  #allocateLoadBalancerNodePorts: false #True to assign node port if nodePort value is not given. It applies for Nodeport or Loadbalancer service types.
...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-deployment
  namespace: flask-ns
  labels:
    name: flask-deployment
  annotations:
    name: flask-deployment
spec:
  selector: #It must match the pod template's labels. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
    matchLabels:
      app: python-flask
  template:
    metadata:
      labels:
        app: python-flask
    spec:
      containers:
        - name: flask-app
          image: "venkhat/flaskproject:v2"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5500
              protocol: TCP
          readinessProbe: # readinessProbe -- Indicates whether the container is ready to respond to requests. If the readiness probe fails, the endpoints controller removes the Pod's IP address from the endpoints of all Services that match the Pod. livenessProbe -- Indicates whether the container is running. If the liveness probe fails, the kubelet kills the container, and the container is subjected to its restart policy. startupProbe -- Indicates whether the application within the container is started. All other probes are disabled if a startup probe is provided, until it succeeds. If the startup probe fails, the kubelet kills the container, and the container is subjected to its restart policy.
            httpGet: # HTTPGet specifies the http request to perform
              port: 5500 # port to access on the container
              path: /login #Path to access on the HTTP server.
              scheme: "HTTP" #Scheme to use for connecting to the host. Defaults to HTTP.
            periodSeconds: 2 #How often (in seconds) to perform the probe. Default to 10 seconds. 
            timeoutSeconds: 2 #Number of seconds after which the probe times out. Defaults to 1 second
            failureThreshold: 2 #Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3.
            successThreshold: 2 #Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup.
          livenessProbe: # livenessProbe -- Indicates whether the container is running. If the liveness probe fails, the kubelet kills the container, and the container is subjected to its restart policy. 
            httpGet:
              port: 5500 
              path: /login
              scheme: "HTTP"
            initialDelaySeconds: 5 # Number of seconds after the container has started before liveness probes are initiated.
            periodSeconds: 2
            timeoutSeconds: 2
            failureThreshold: 2
            successThreshold: 1 # Must be 1 for liveness and startup
          resources:
            limits:
              memory: 500Mi
              cpu: 500m
            requests:
              memory: 150Mi
              cpu: 250m
      imagePullSecrets: 
        - name: venkhatcred
      restartPolicy: "Always"
  replicas: 3 #Number of desired pods. Defaults to 1. 
  minReadySeconds: 3 #Min seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0.
  strategy:
    type: "RollingUpdate" #It is Default and replace the old ReplicaSets by new one using rolling update i.e gradually scale down the old ReplicaSets and scale up the new one. "Recreate" Kill all existing pods before creating new ones.
    rollingUpdate:
      maxSurge: "20%" #The maximum number of pods that can be scheduled above the desired number of pods. Defaults to 25%.
      maxUnavailable: "20%" #The maximum number of pods that can be unavailable during the deployment update. Defaults to 25%.
  revisionHistoryLimit: 8 #The number of old ReplicaSets to retain to allow rollback. Defaults to 10. To find the revision - kubectl rollout history deployment/flask-deployment
  progressDeadlineSeconds: 600 #The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a "ProgressDeadlineExceeded" reason will be surfaced in the deployment status.
  paused: false #Indicates deployment is paused. To pause manually - kubectl rollout pause deployment/flask-deployment. To resume manually - kubectl rollout resume deployment/flask-deployment
...